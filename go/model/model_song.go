/*
 * LEAV
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package model

import (
	util "github.com/lea-video/backend/go/utility"
)

type RawSong struct {
	ID string `json:"id,omitempty"`

	TitleID string `json:"titleID,omitempty"`

	ArtistIDs []string `json:"artistIDs,omitempty"`

	FeaturingIDs []string `json:"featuringIDs,omitempty"`

	VariantIDs []string `json:"variantIDs,omitempty"`

	CoverIDs []string `json:"coverIDs,omitempty"`

	CleanAudioID string `json:"cleanAudioID,omitempty"`

	DefaultVideoID string `json:"defaultVideoID,omitempty"`
}

type Song struct {
	*RawSong

	Title *Title `json:"title,omitempty"`

	Artists []*Celebrity `json:"artists,omitempty"`

	Featuring []*Celebrity `json:"featuring,omitempty"`

	Variants []*Media `json:"variants,omitempty"`

	Covers []*SongCover `json:"covers,omitempty"`

	CleanAudio *Media `json:"cleanAudio,omitempty"`

	DefaultVideo *Media `json:"defaultVideo,omitempty"`
}

type RawSongCover struct {
	ID string `json:"id,omitempty"`

	ArtistID string `json:"artistID,omitempty"`

	CoverID string `json:"coverID,omitempty"`
}

type SongCover struct {
	*RawSongCover

	Artist *Celebrity `json:"artist,omitempty"`

	Cover *Media `json:"cover,omitempty"`
}

func NewSong(title *Title) *Song {
	return &Song{
		RawSong: &RawSong{
			ID:           util.NewID(),
			TitleID:      title.getID(),
			ArtistIDs:    make([]string, 0),
			FeaturingIDs: make([]string, 0),
			VariantIDs:   make([]string, 0),
			CoverIDs:     make([]string, 0),
		},
		Title:     title,
		Artists:   make([]*Celebrity, 0),
		Featuring: make([]*Celebrity, 0),
		Variants:  make([]*Media, 0),
		Covers:    make([]*SongCover, 0),
	}
}

func (s *Song) getID() string {
	return s.ID
}

func (*Song) getType() string {
	return "Song"
}

func (s *Song) AddCover(c *Celebrity, m *Media) {
	sc := &SongCover{
		RawSongCover: &RawSongCover{
			ID:       util.NewID(),
			ArtistID: c.getID(),
			CoverID:  m.getID(),
		},
		Artist: c,
		Cover:  m,
	}
	s.CoverIDs = append(s.CoverIDs, sc.ID)
	s.Covers = append(s.Covers, sc)
}
