/*
 * LEAV
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package leav

import (
	"encoding/json"
	"errors"
)

type Playable interface {
	getType() string
}

func UnmarshalPlayable(data map[string]interface{}) (Playable, error) {
	dataType := data["type"]
	delete(data, "type")
	b, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	switch dataType {
	case "Series":
		{
			parsed := Series{}
			err := json.Unmarshal(b, &parsed)
			return &parsed, err
		}
	case "Season":
		{
			parsed := Season{}
			err := json.Unmarshal(b, &parsed)
			return &parsed, err
		}
	case "Movie":
		{
			parsed := Movie{}
			err := json.Unmarshal(b, &parsed)
			return &parsed, err
		}
	case "Song":
		{
			parsed := Song{}
			err := json.Unmarshal(b, &parsed)
			return &parsed, err
		}
	case "Album":
		{
			parsed := Album{}
			err := json.Unmarshal(b, &parsed)
			return &parsed, err
		}
	case "ImageSet":
		{
			parsed := ImageSet{}
			err := json.Unmarshal(b, &parsed)
			return &parsed, err
		}
	case "Media":
		{
			parsed := Media{}
			err := json.Unmarshal(b, &parsed)
			return &parsed, err
		}
	case "Snippet":
		{
			parsed := Snippet{}
			err := json.Unmarshal(b, &parsed)
			return &parsed, err
		}
	default:
		return nil, errors.New("unknown playable")
	}
}
