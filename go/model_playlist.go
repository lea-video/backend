/*
 * LEAV
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package leav

import (
	"encoding/json"
)

type Playlist struct {
	Id string `json:"id,omitempty"`

	Title *Title `json:"title,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	Items []*PlaylistItem `json:"items,omitempty"`
}

type PlaylistItem struct {
	Index int32 `json:"index,omitempty"`

	RemovedAt int32 `json:"removedAt,omitempty"`

	AddedAt int32 `json:"addedAt,omitempty"`

	Item Playable `json:"item,omitempty"`
}

type playlistItemJSON struct {
	Index int32 `json:"index,omitempty"`

	RemovedAt int32 `json:"removedAt,omitempty"`

	AddedAt int32 `json:"addedAt,omitempty"`

	Item map[string]interface{} `json:"item,omitempty"`
}

func (p *PlaylistItem) MarshalJSON() ([]byte, error) {
	// Serialise PlaylistItem#Item
	tmp, err := json.Marshal(p.Item) // Convert to a json string
	if err != nil {
		return nil, err
	}
	var item map[string]interface{}
	err = json.Unmarshal(tmp, &item) // Convert to a map
	if err != nil {
		return nil, err
	}

	// Expand with type Keyword
	item["type"] = p.Item.getType()

	// Map to intermediate type
	data := playlistItemJSON{
		Index:     p.Index,
		RemovedAt: p.RemovedAt,
		AddedAt:   p.AddedAt,
		Item:      item,
	}
	// return
	return json.Marshal(&data)
}

func (p *PlaylistItem) UnmarshalJSON(body []byte) error {
	data := playlistItemJSON{}
	err := json.Unmarshal(body, &data)
	if err != nil {
		return err
	}

	// Map to PlaylistItem
	p.Index = data.Index
	p.RemovedAt = data.RemovedAt
	p.AddedAt = data.AddedAt
	p.Item, err = UnmarshalPlayable(data.Item)

	return err
}

func NewPlaylist(title *Title) *Playlist {
	return &Playlist{
		Title: title,
		Tags:  make([]*Tag, 0),
		Items: make([]*PlaylistItem, 0),
	}
}

func (t *Playlist) AddItem(p Playable) {
	e := PlaylistItem{
		Item: p,
	}
	t.Items = append(t.Items, &e)
}
